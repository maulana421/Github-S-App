package com.example.githubs.ui.detailimport android.app.Applicationimport android.content.ContentValues.TAGimport android.util.Logimport androidx.lifecycle.*import com.example.githubs.api.ApiConfigimport com.example.githubs.model.DetailUsersimport com.example.githubs.repository.UsersRepositoryimport com.example.githubs.room.entity.UsersFavoriteimport kotlinx.coroutines.launchimport retrofit2.Callimport retrofit2.Callbackimport retrofit2.Responseclass DetailViewModel(application: Application): AndroidViewModel(application) {    private val _detailUsers = MutableLiveData<DetailUsers>()    val detailUsers: LiveData<DetailUsers> = _detailUsers    private val mUsersRepository: UsersRepository = UsersRepository(application)    private val _isLoading = MutableLiveData<Boolean>()    val isLoading: LiveData<Boolean> = _isLoading    fun getDetailUsers(username: String){        _isLoading.value = true        ApiConfig.getApiService().getDetailUsers(username)            .enqueue(object : Callback<DetailUsers>{                override fun onResponse(call: Call<DetailUsers>, response: Response<DetailUsers>) {                    _isLoading.value = false                    if (response.isSuccessful){                        _detailUsers.value = response.body()                    }                }                override fun onFailure(call: Call<DetailUsers>, t: Throwable) {                    _isLoading.value = false                    Log.e(TAG, "onFailure ${t.message.toString()}")                }            })    }    fun addFavoriteUsers(id:Int,username: String, avatar:String){        viewModelScope.launch {            var user = UsersFavorite(id,username,avatar)            mUsersRepository.addFavoriteUsers(user)        }    }    fun deleteFavoriteUsers(id: Int){        viewModelScope.launch {            mUsersRepository.deleteFavoriteUsers(id)        }    }    suspend fun checkUserFavorite(id: Int):Int {        return mUsersRepository.checkUserFavorite(id)    }}